import React, { useRef, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  Dimensions,
  Modal,
  Animated,
  TouchableOpacity,
} from "react-native";
import { LinearGradient } from "expo-linear-gradient";
import CardBack from "./CardBack";
import Buttons from "../../Buttons";

const CardFront = ({
  word,
  definition,
  handleChooseDef,
  guessedDef,
  getAWord,
  handleChooseWord,
  visible,
  onClose,
  getWord,
  setGetWord
}) => {
  const { width, height } = Dimensions.get("window");
  const cardWidth = width * .9
   const cardHeight = width * 1.5;
//   const cardHeight = height * .9

  const flipAnimation = useRef(new Animated.Value(0)).current;
  const positionAnimation = useRef(
    new Animated.ValueXY({ x: 0, y: 0 })
  ).current;

  useEffect(() => {
    if (getWord) {
      startPositionAnimation();
    }
  }, [getWord]);

  const startPositionAnimation = () => {
    Animated.parallel([
      // Flip animation
      Animated.timing(flipAnimation, {
        toValue: 1,
        duration: 1500,
        useNativeDriver: true,
      }),
      // Position animation
      Animated.timing(positionAnimation, {
        toValue: { x: 0, y: 0 }, // Move to center
        duration: 1500,
        useNativeDriver: true,
      }),
    ]).start();
  };

  // Interpolation for back rotation
  const backRotation = flipAnimation.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: ["0deg", "90deg", "180deg"], // Back starts visible, rotates to hide
  });

  // Interpolation for front rotation
  const frontRotation = flipAnimation.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: ["180deg", "90deg", "0deg"], // Front starts hidden, rotates to show
  });

  // Interpolation for scaling
  const scale = flipAnimation.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: [1, 1.1, 1.2], // Grow and settle
  });

const handleClose = ()=>{
setGetWord(false)
}
  return !getWord ? (
    <CardBack title={{ first: "Balder", second: "Dash" }} />
  ) : (
    <Modal
      visible={getWord}
      animationType="fade"
      transparent={true}
      onRequestClose={onClose}
    >
      <View style={styles.modalContainer}>
        <Animated.View
          style={[
            styles.cardContainer,
            {
              transform: [
                { translateX: positionAnimation.x },
                { translateY: positionAnimation.y },
                { scale },
              ],
            },
          ]}
        >
          {/* Back of the card */}
          <Animated.View
            style={[
              styles.cardBack,
              {
                width: cardWidth,
                height: cardHeight,
                transform: [{ scale }, { rotateY: backRotation }],
                position: "absolute",
              },
            ]}
          >
            <CardBack title={{ first: "Balder", second: "Dash" }} />
          </Animated.View>

          {/* Front of the card */}
          <Animated.View
            style={[
              styles.card,
              {
                width: cardWidth,
                height: cardHeight,
                transform: [{ scale }, { rotateY: frontRotation }],
                position: "absolute",
              },
            ]}
          >
            <LinearGradient
              colors={["#88ebe6", "#283330"]}
              style={[styles.card, { height: cardHeight, width: cardWidth }]}
            >
              <View style={styles.innerCard}>
                <Animated.View style={styles.topPortion}>
                  <Text style={styles.topText}>{word}</Text>
                </Animated.View>

                <View style={styles.bottomPortion}>
                  <Text style={styles.bottomText}>{definition}</Text>
                </View>

                <View style={styles.buttons}>
                  {getAWord}
                  <Buttons
                    name={"Choose Word"}
                    func={handleChooseWord}
                    pulse={"pulse"}
                  />
                  <Buttons name={"close"} func={handleClose} pulse={"pulse"} />
                </View>
              </View>
            </LinearGradient>
          </Animated.View>
        </Animated.View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)", // Semi-transparent background
  },
  cardContainer: {
    justifyContent: "center",
    alignItems: "center",
    backfaceVisibility: "hidden",
  },
  card: {
    zIndex: 2004,
    borderRadius: 50,
    padding: 30,
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    overflow: "hidden",
    borderWidth: 8,
    backfaceVisibility: "hidden", // Prevents the back and front from showing simultaneously
  },
  cardBack: {
    zIndex: 1,
    borderRadius: 50,
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    marginVertical: 10,
    overflow: "hidden",
    backfaceVisibility: "hidden", // Prevents the back and front from showing simultaneously
  },
  innerCard: {
    width: "100%",
    height: "100%",
    justifyContent: "flex-start",
    alignItems: "center",
    borderRadius: 40,
    borderColor: "black",
    borderWidth: 5,
    backgroundColor: "#e6e8dc",
    flexDirection: "column",
    overflow: "hidden",
  },
  topPortion: {
    height: "40%",
    width: "100%",
    backgroundColor: "#88ebe6",
    justifyContent: "center",
    borderBottomWidth: 5,
    borderBottomColor: "#571122",
  },
  topText: {
    fontSize: 40,
    fontWeight: "bold",
    textAlign: "center",
    textDecorationLine: "underline",
  },
  bottomPortion: {
    padding: 10,
    width: "100%",
  },
  bottomText: {
    marginTop: 10,
    fontSize: 20,
    fontWeight: "bold",
    width: "100%",
  },
  buttons: {
    marginTop: "auto",
    width: "100%",
    flexDirection: "column",
    justifyContent: "space-around",
    padding: 10,
  },
});

export default CardFront;
